<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Geeky Tidbits</title>
    <description>Tidbits on software development, technology, and other geeky stuff.</description>
    <link>https://www.geekytidbits.com/</link>
    <atom:link href="https://www.geekytidbits.com/feed/" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 01 Mar 2019 13:38:56 -0600</pubDate>
    <lastBuildDate>Fri, 01 Mar 2019 13:38:56 -0600</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>A Fresh Look at TypeScript</title>
        <description>&lt;p&gt;More and more people and projects are using TypeScript today!  That‚Äôs interesting because in the world of JavaScript it‚Äôs not too common for a project‚Äôs use to accelerate &lt;em&gt;years after&lt;/em&gt; it was released (2012).&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;https://octoverse.github.com/&quot;&gt;2018 GitHub Octoverse Report&lt;/a&gt;, TypeScript reached ‚Äú#7 among top languages used on the platform overall, after making its way in the top 10 for the first time last year‚Äù.  It is also the #3 fastest growing language on GitHub.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/github-typescript.png&quot; alt=&quot;2018 GitHub Octoverse Report - TypeScript Growth&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;https://insights.stackoverflow.com/survey/2017&quot;&gt;Stack Overflow Developer Survey Results 2017&lt;/a&gt;, TypeScript made the top 10 Most Popular Programming Languages list.  In 2018, this category combined ‚ÄúProgramming, Scripting, and Markup Languages‚Äù so if you exclude things like CSS, HTML, and Bash, it still made the top 10 in 2018. üòè&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/stackoverflow-typescript.png&quot; alt=&quot;Stack Overflow Developer Survey Results 2017 - TypeScript Popularity&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;birdseye-view&quot;&gt;Birdseye View&lt;/h2&gt;

&lt;p&gt;At its core, TypeScript is superset of JavaScript that was designed by &lt;a href=&quot;https://en.wikipedia.org/wiki/Anders_Hejlsberg&quot;&gt;Anders Hejlsberg&lt;/a&gt; and initially released in 2012.  It is made up of a  &lt;strong&gt;language service&lt;/strong&gt; and a &lt;strong&gt;type checking transpiler&lt;/strong&gt;.  The transpiler is run with the command &lt;code class=&quot;highlighter-rouge&quot;&gt;tsc&lt;/code&gt; and takes TypeScript and converts it to JavaScript.  The language service is a JavaScript based interface that development tools (think editors and CLI commands) can utilize to give development time support for things such as Intellisense, refactoring tooling, and symbol searching.  Each of these parts are incredibly useful independently but when combined are even more powerful.&lt;/p&gt;

&lt;h2 id=&quot;notable-features&quot;&gt;Notable Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Non-nullable type checking&lt;/li&gt;
  &lt;li&gt;Implicit type checking&lt;/li&gt;
  &lt;li&gt;Transpile async/await to ES5/ES3&lt;/li&gt;
  &lt;li&gt;Implicit types (can be used for vanilla JS)&lt;/li&gt;
  &lt;li&gt;ESNext (arrow, async/await, decorators, etc.)&lt;/li&gt;
  &lt;li&gt;JSX support&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;some-examples&quot;&gt;Some Examples&lt;/h2&gt;

&lt;p&gt;Below, I‚Äôll give some examples of how the type system in TypeScript can be used.  This is certainly not an exhaustive list of features but ones I think demonstrate the power and usefulness of the language without getting too advanced.&lt;/p&gt;

&lt;h3 id=&quot;basic-types&quot;&gt;Basic Types&lt;/h3&gt;

&lt;p&gt;The easiest part to understand of TypeScript is its type checking of basic types.  In TypeScript, you use &lt;em&gt;type annotations&lt;/em&gt; to describe the type of a paramter.  In the following example, notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;person: string&lt;/code&gt; parameter.  That &lt;code class=&quot;highlighter-rouge&quot;&gt;: string&lt;/code&gt; suffix is the type annotation.  You are telling TypeScript that only strings should be accepted as the &lt;code class=&quot;highlighter-rouge&quot;&gt;person&lt;/code&gt; parameter on the &lt;code class=&quot;highlighter-rouge&quot;&gt;greeter&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ERROR: Argument of type 'number[]' is not assignable to parameter of type 'string'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A TypeScript error will be rasied when calling &lt;code class=&quot;highlighter-rouge&quot;&gt;greeter(user);&lt;/code&gt; with an array of numbers because TypeScript knows &lt;code class=&quot;highlighter-rouge&quot;&gt;person&lt;/code&gt; should only be a string.&lt;/p&gt;

&lt;h3 id=&quot;function-types&quot;&gt;Function Types&lt;/h3&gt;

&lt;p&gt;Functions in JavaScript are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/First-class_Function&quot;&gt;first-class&lt;/a&gt; objects and TypeScript has first-class support for type checking them.  When specifying a function type, you can specify the type of parameters it has and also the return type expected.  This is powerful.  In the following example, we tell TypeScript that the &lt;code class=&quot;highlighter-rouge&quot;&gt;save&lt;/code&gt; function takes a &lt;code class=&quot;highlighter-rouge&quot;&gt;getUserId&lt;/code&gt; function paramter that must accept a string parameter and must return a number.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;getUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This anonymous function must match the type struture!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;string-valued-enums&quot;&gt;String Valued Enums&lt;/h3&gt;

&lt;p&gt;Enums are a bit foreign to the JavaScript world but it‚Äôs a shame because they make code readable and give static benefits.  TypeScript brings them to JavaScript so you can do things like this:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;Red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#ff0000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;Green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#00ff00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;Blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#0000ff'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myFavoriteColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chosenColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;string-literal-types&quot;&gt;String Literal Types&lt;/h3&gt;

&lt;p&gt;A fairly recent addition to TypeScript is something called String Literal Types.  In the following example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;direction&lt;/code&gt; parameter of &lt;code class=&quot;highlighter-rouge&quot;&gt;move&lt;/code&gt; expects a string, but not just any string.  It &lt;em&gt;must&lt;/em&gt; be ‚ÄúNorth‚Äù, ‚ÄúEast‚Äù, ‚ÄúSouth‚Äù, or ‚ÄúWest‚Äù.  Passing any other string will cause a compile error!&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CardinalDirection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;North&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;East&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;South&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;West&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CardinalDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;North&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Northwest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ERROR: Argument of type '&quot;Northwest&quot;' is not assignable to parameter of type 'CardinalDirection'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;interfaces&quot;&gt;Interfaces&lt;/h3&gt;

&lt;p&gt;Interfaces are really useful to provide a way to describe the shape of an object.  You can even specify that properties are optional by adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; to the end of the property name.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Optional&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newPerson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Sue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ERROR: Type '{ firstName: string; age: number; }' is not assignable to type 'Person'.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;generics&quot;&gt;Generics&lt;/h3&gt;

&lt;p&gt;Generics are all about reusability.  With them, you can design functions that are able to work with a type that is specified by a caller rather than hard-coded in.&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ERROR: cannot push a string. Only numbers allowed.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;strict-null-checks&quot;&gt;Strict Null Checks&lt;/h3&gt;

&lt;p&gt;If you try to reference a property that &lt;em&gt;could&lt;/em&gt; be null because to haven‚Äôt given it a value, TypeScript will error out.  This is a huge deal to know this at build time!&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;getMember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ageString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ERROR: Object is possibly 'undefined'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;decorators&quot;&gt;Decorators&lt;/h3&gt;

&lt;p&gt;Per the &lt;a href=&quot;https://github.com/wycats/javascript-decorators#summary&quot;&gt;TC39 proposal&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Decorators make it possible to annotate and modify classes and properties at design time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can think of them as giving you the ability to augment or &lt;em&gt;wrap&lt;/em&gt; functionality around other functions.  Decorators are becoming standardized in JavaScript itself but have been supported in TypeScript for some time.&lt;/p&gt;

&lt;p&gt;In the following example, we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; method that we decorated with &lt;code class=&quot;highlighter-rouge&quot;&gt;@protected&lt;/code&gt;.  This allows to to run the &lt;code class=&quot;highlighter-rouge&quot;&gt;protected&lt;/code&gt; function first, and then run the &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PeopleController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;protected&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;protected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isAuthenticated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 07 Feb 2019 00:00:00 -0600</pubDate>
        <link>https://www.geekytidbits.com/a-fresh-look-at-typescript/</link>
        <guid isPermaLink="true">https://www.geekytidbits.com/a-fresh-look-at-typescript/</guid>
        
        
      </item>
    
      <item>
        <title>My External Display Setup</title>
        <description>&lt;p&gt;I am really happy with my multiple display arrangement and would like to share my setup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/multiple-displays.jpg&quot; alt=&quot;Windows 95 CD-ROM&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;primary&quot;&gt;Primary&lt;/h2&gt;

&lt;p&gt;My MacBook Pro is front and center.  I use it as my &lt;em&gt;primary&lt;/em&gt; screen, keyboard, and touchpad.  Some people are surprised I do this because a more typical setup with external displays is to use an external display as the primary one and an external keyboard / trackpad.  But here‚Äôs why I like it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The MacBook retina display is truly great.  Why waste a screen in clamshell mode or relegate it off to the side when I could take full advantage of it?&lt;/li&gt;
  &lt;li&gt;I love the MacBook trackpad.  It‚Äôs the best trackpad on a laptop, bar-none.&lt;/li&gt;
  &lt;li&gt;I like the proximity of the trackpad in relation to the keyboard.  I like that I do not need to move my fingers far to switch between the keys and the trackpad.  I feel that less hand travel makes me more productive.&lt;/li&gt;
  &lt;li&gt;Since I work remotely, from time to time I take my laptop out of my house and work from other locations like coffee shops.  When I am there, I only have my laptop.  If I use my laptop screen as my primary display / keyboard / trackpad when at home I feel just as comfortable when I am without my external displays.  No need to reorient myself with a new setup when I swap back and forth.&lt;/li&gt;
  &lt;li&gt;Having my MacBook centered &lt;em&gt;underneath&lt;/em&gt; one of my external displays is an efficient way to have 2 external displays within close visual range.  I simply pan my eyes up and down rather than side or side and possibly having to rotate my neck.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I use the primary for editing code and doing my, well, ‚Äúprimary‚Äù work.&lt;/p&gt;

&lt;h2 id=&quot;center&quot;&gt;Center&lt;/h2&gt;

&lt;p&gt;My external display above my MacBook is front and center, right &lt;em&gt;above&lt;/em&gt; my MacBook.  It is very easy for my eyes to travel from the MacBook up to this display.  Having it &lt;em&gt;centered&lt;/em&gt; above the laptop is important to me.  I have worked with 2 external display setups before that had the joining of the displays right in front of me.  This is such a waste and forces me to turn my head or move my eyes to see the screens.&lt;/p&gt;

&lt;p&gt;I use this display with two application windows side-by-side with Slack on the left and my browser on the right.  I also have a secondary desktop (Desktop 2) on this display with a full screen browser that has my browser DevTools open for debugging.  I can easily get to to Desktop 2 on macOS with a 3-finger swipe to the left.&lt;/p&gt;

&lt;h2 id=&quot;vertical-aside&quot;&gt;Vertical Aside&lt;/h2&gt;

&lt;p&gt;The display on the left is obviously rotated 90 degrees.  This allows me to not have to turn my neck too far to see it but still gives me the benefit 
of a larger display.  I use this display for my terminal and source control GUI.  I don‚Äôt look at this display as often which is why it is to the side.&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Oct 2018 00:00:00 -0500</pubDate>
        <link>https://www.geekytidbits.com/multiple-displays/</link>
        <guid isPermaLink="true">https://www.geekytidbits.com/multiple-displays/</guid>
        
        
      </item>
    
      <item>
        <title>SELECT DISTINCT ON in PostgreSQL</title>
        <description>&lt;p&gt;PostgreSQL has a really interesting and powerful construct called &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT DISTINCT ON&lt;/code&gt;.  No, this is not a typical &lt;code class=&quot;highlighter-rouge&quot;&gt;DISTINCT&lt;/code&gt;.  This is different.  It is perfect when you have groups of data that are similar and want to pull a single record out of each group, based on a specific ordering.&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a an example of some log data.  You have a log table that stores the &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; of a request and the &lt;code class=&quot;highlighter-rouge&quot;&gt;request_duration&lt;/code&gt;, which is how long it took to process the request for that URL.  It also contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp&lt;/code&gt; column.  If you wanted to answer the question ‚Äúwhat is the most recent duration for each unique URL?‚Äù you might end up with a query that looks something like this:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_duration&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_timestamp&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_by_url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_by_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_by_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That &lt;code class=&quot;highlighter-rouge&quot;&gt;INNER JOIN&lt;/code&gt; with a subquery is used to determine the last timestamp for each URL.  Then, the outer query is pulling from the log table and using the results of that subquery to limit the results to only the last requests by URL.  There are several ways this could be done as well including using a &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE IN&lt;/code&gt; clause (assuming there is a single identifier that could be used), a &lt;code class=&quot;highlighter-rouge&quot;&gt;LATERAL&lt;/code&gt; join or a &lt;code class=&quot;highlighter-rouge&quot;&gt;WINDOW&lt;/code&gt; function.  These approaches work but all of them require some type of 2 step query where the first step is identifying the target row and the second step is actually pulling that target row.  This isn‚Äôt terriby complex SQL but it can become a bit cumbersome.&lt;/p&gt;

&lt;p&gt;Let‚Äôs think about a regular &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT DISTINCT&lt;/code&gt; clause for a moment.  When you use a &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT DISTINCT&lt;/code&gt; clause, you are discarding duplicate rows and only retaining a single one.  But, the one that is kept is identical to the rest.  What if you could tell &lt;code class=&quot;highlighter-rouge&quot;&gt;DISTINCT&lt;/code&gt; to only consider &lt;em&gt;some&lt;/em&gt; fields for distinction and then which row you want to pull from this group of mostly similar but slightly varying rows?  This is what &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT DISTINCT ON&lt;/code&gt; does.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;DISTINCT ON&lt;/code&gt;, You tell PostgreSQL to return a single row for each distinct group defined by the &lt;code class=&quot;highlighter-rouge&quot;&gt;ON&lt;/code&gt; clause.  &lt;em&gt;Which&lt;/em&gt; row in that group is returned is specified with the &lt;code class=&quot;highlighter-rouge&quot;&gt;ORDER BY&lt;/code&gt; clause.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Back to our log example.  To acomplish what we did above with &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT DISTINCT ON&lt;/code&gt;, it looks like this:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request_duration&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That‚Äôs it!  We‚Äôre telling PostgreSQL to ‚Äúput the logs into groups unique by url (&lt;code class=&quot;highlighter-rouge&quot;&gt;ON (url)&lt;/code&gt;), sort each of these groups by most recent (&lt;code class=&quot;highlighter-rouge&quot;&gt;ORDER BY timestamp DESC&lt;/code&gt;) and then return fields for the first record in each of these groups (&lt;code class=&quot;highlighter-rouge&quot;&gt;url, request_duration&lt;/code&gt;).&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Oct 2018 00:00:00 -0500</pubDate>
        <link>https://www.geekytidbits.com/postgres-distinct-on/</link>
        <guid isPermaLink="true">https://www.geekytidbits.com/postgres-distinct-on/</guid>
        
        
      </item>
    
      <item>
        <title>Bank Alerts to YNAB</title>
        <description>&lt;p&gt;I have been really busy for the past few months at &lt;a href=&quot;http://www.youneedabudget.com&quot;&gt;YNAB&lt;/a&gt; working on the new &lt;a href=&quot;https://www.youneedabudget.com/introducing-ynabs-api/&quot;&gt;Public API&lt;/a&gt;.  It‚Äôs been a lot of fun, hard work, and learning along the way.  I have really enjoyed seeing what the community has done with the API so far as well.&lt;/p&gt;

&lt;p&gt;Along with helping to build the new API, I have played with building a few things for it too.  I created a &lt;a href=&quot;https://github.com/bradymholt/debt-paydown-calculator&quot;&gt;Debt Paydown Calculator&lt;/a&gt; and some &lt;a href=&quot;https://github.com/bradymholt/ynab-utils&quot;&gt;utilities&lt;/a&gt; to do things like import my pending transactions in YNAB and update transaction memos on Amazon purchases to include the list of items for that purchase (love that one!).  Besides being fun, building these things has also helped me actually &lt;em&gt;use&lt;/em&gt; the API and see friction along the way that needs to be improved.  I have made many improvements to the API, clients, and documentation as a direct result of working on these little projects.&lt;/p&gt;

&lt;p&gt;The most recent project for the API I‚Äôve worked on is a proof-of-concept project called &lt;a href=&quot;https://github.com/bradymholt/bank-alerts-to-ynab&quot;&gt;Bank Alerts to YNAB&lt;/a&gt; which ‚Äúroutes spending alert emails from your bank to YNAB so your transactions appear in YNAB seconds after they occur‚Äù.  So, if your bank is supported, you can swipe your Visa at Costco and have the transaction automatically imported into YNAB by the time you can say ‚ÄúI love YNAB and I cannot lie‚Äù.&lt;/p&gt;

&lt;p&gt;I set out with some goals in mind when I started this project: &lt;strong&gt;free&lt;/strong&gt; and &lt;strong&gt;easy&lt;/strong&gt; and was able, I think, to acheive both of those.  I used &lt;a href=&quot;https://glitch.com&quot;&gt;Glitch&lt;/a&gt; to host the webhook server and &lt;a href=&quot;https://cloudmailin.com&quot;&gt;CloudMalin&lt;/a&gt; to route emails to the webhook.  This was a project project and I hope others find it useful.&lt;/p&gt;

&lt;p&gt;You can learn more about this project on the &lt;a href=&quot;https://github.com/bradymholt/bank-alerts-to-ynab&quot;&gt;GitHub repo page&lt;/a&gt; and also checkout my 2 minutes setup video:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=PDiMCY-NngQ&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;alignnone wp-image-2190 size-full&quot; src=&quot;https://camo.githubusercontent.com/135a8b22aff4b81b906978f17f54f6dfb385c299/68747470733a2f2f63646e2e676c697463682e636f6d2f31316230666639612d633337352d346563622d393364322d633463303962313064353839253246646f776e6c6f61642e706e673f31353335373439353533313334&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 05 Sep 2018 00:00:00 -0500</pubDate>
        <link>https://www.geekytidbits.com/bank-alerts-to-ynab/</link>
        <guid isPermaLink="true">https://www.geekytidbits.com/bank-alerts-to-ynab/</guid>
        
        
      </item>
    
      <item>
        <title>My Windows 95 Story</title>
        <description>&lt;p&gt;I was cleaning out one of my drawers today and came across this old gem.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/windows-95.jpg&quot; alt=&quot;Windows 95 CD-ROM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The day was Thursday, August 24, 1995.  I had been anticipating this day for months.  Microsoft brochures, geek buzz in AOL chatrooms, and chatter with my friends made me unable to wait to get my hands on a copy of Windows 95.&lt;/p&gt;

&lt;p&gt;Since I was fifteen years old and unable to drive, my mom dropped me off at CompUSA around 8AM so I could be in line for the 9AM store opening.
The line was already wrapped around the building.  In line, I chatted with some folks about nothing other than Windows 95 and we gave our thoughts on it.  Some people
were skeptical and fearing Microsoft was moving in the direction of Apple where settings were abstracted and you had less control.  Others had nothing but excitement
for the world‚Äôs newest operating system.  My opinion was somewhere between these extremes.&lt;/p&gt;

&lt;p&gt;Once I finally made it inside the store and grabbed my Windows 95 &lt;em&gt;uprade&lt;/em&gt; box, I headed for the cashier line and prepared to pay the $109.95 (plus tax) price tag.  I
had been mowing lawns to save up for this important purchase.  That was a lot of money for me but I didn‚Äôt think twice about it.&lt;/p&gt;

&lt;p&gt;My mom came back and got me around 9:30 and when we got home I popped the CD in my Unisys 386 computer and started the installation process.  It took for what seemed
like forever but once it installed and booted, I was ecstatic.  The interface was clean, fresh, and it felt so much more advanced than Windows 3.1.&lt;/p&gt;

&lt;p&gt;It didn‚Äôt take too before I discovered and kicked back to watch the 2 music videos on the installation CD: &lt;a href=&quot;https://www.youtube.com/watch?v=iqL1BLzn3qc&quot;&gt;Edie Brickell - Good Times&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=ApN2eLI4d-4&quot;&gt;Weezer - Buddy Holly&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Wed, 25 Jul 2018 00:00:00 -0500</pubDate>
        <link>https://www.geekytidbits.com/my-windows-95-story/</link>
        <guid isPermaLink="true">https://www.geekytidbits.com/my-windows-95-story/</guid>
        
        
      </item>
    
      <item>
        <title>Vue.js template featuring TypeScript and Bulma</title>
        <description>&lt;p&gt;I‚Äôve been getting more and more into &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue.js&lt;/a&gt; lately because it‚Äôs awesome and feels good.  Plus, it‚Äôs not React so using it seems counter-culture and edgy, FTW.  Also, Vue has improved &lt;strong&gt;TypeScript&lt;/strong&gt; support and I‚Äôve been checking that out.  Oh, and I keep hearing about this new CSS framework called &lt;strong&gt;Bulma&lt;/strong&gt; that I want to play around with.  What is a developer to do with all these things swirling around in their head?  Build a template, of course.&lt;/p&gt;

&lt;p&gt;Well, I‚Äôm back to making templates again.  I don‚Äôt know why but it seems to be my thing lately.  The &lt;a href=&quot;https://github.com/bradymholt/koa-vuejs-template&quot;&gt;last Vue.js template I worked&lt;/a&gt; on was full stack and included PostgreSQL, authentication, and bunch of other cool stuff.  This time, I wanted to make it simple.  Just a simple scaffold template using Vue.js that would be a nice starter for the next project I decide to tackle.&lt;/p&gt;

&lt;p&gt;So, &lt;a href=&quot;https://github.com/bradymholt/vue-typescript-bulma-template&quot;&gt;vue-typescript-bulma-template&lt;/a&gt; is what I came up with.  I‚Äôm good at naming things, right?  If you look at the &lt;a href=&quot;https://bradymholt.github.io/vue-typescript-bulma-template/#/&quot;&gt;page output&lt;/a&gt; you‚Äôd think there isn‚Äôt much to this thing:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/vue-ts-bulma.png&quot; alt=&quot;Template Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But actually, there is quite a lot of nice stuff built in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TypeScript 2.8.3&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vuejs/vue-class-component&quot;&gt;vue-class-component&lt;/a&gt; usage (class-style Vue components via ES decorators)&lt;/li&gt;
  &lt;li&gt;Bulma CSS Framework&lt;/li&gt;
  &lt;li&gt;Sass&lt;/li&gt;
  &lt;li&gt;Font Awesome 5&lt;/li&gt;
  &lt;li&gt;Webpack 4
    &lt;ul&gt;
      &lt;li&gt;Development server&lt;/li&gt;
      &lt;li&gt;Hot Reload support&lt;/li&gt;
      &lt;li&gt;development and production config&lt;/li&gt;
      &lt;li&gt;CDN config for Vue.js and Bulma&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;prerender-spa-plugin&quot;&gt;Prerender SPA Plugin&lt;/a&gt; config&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go &lt;a href=&quot;https://github.com/bradymholt/vue-typescript-bulma-template&quot;&gt;check it out&lt;/a&gt; and build something neat!&lt;/p&gt;
</description>
        <pubDate>Wed, 02 May 2018 00:00:00 -0500</pubDate>
        <link>https://www.geekytidbits.com/vue-typescript-and-bulma-template/</link>
        <guid isPermaLink="true">https://www.geekytidbits.com/vue-typescript-and-bulma-template/</guid>
        
        
      </item>
    
      <item>
        <title>CLI apps in TypeScript via ts-node</title>
        <description>&lt;p&gt;I really like the &lt;a href=&quot;https://github.com/TypeStrong/ts-node&quot;&gt;ts-node&lt;/a&gt; project.  It allows you to run TypeScript in Node.js directly, without having to run the files through the TypeScript compiler (tsc), first.  It does this by registering a handler for files with the &lt;code class=&quot;highlighter-rouge&quot;&gt;.ts&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.tsx&lt;/code&gt; file extentions and relying upon ts-node to marshall back and forth to the TypeScript compiler, on the fly.  It also supports a TypeScript REPL which is really neat.&lt;/p&gt;

&lt;p&gt;I‚Äôve mainly been using it for unit tests in Node projects (&lt;a href=&quot;https://github.com/bradymholt/psqlformat/blob/master/package.json#L52&quot;&gt;example&lt;/a&gt;) to avoid having an intermediate build step.  Also, increasingly, I‚Äôve been using it to execute TypeScript directly on some of my own server-side projects at runtime.  Again, doing this reduces a build-time step and reduces friction.&lt;/p&gt;

&lt;p&gt;Lately, I‚Äôve been using Node more and more to write CLI apps and thought it would be neat if ts-node could be used for this as well.  It turns out it‚Äôs pretty easy.&lt;/p&gt;

&lt;p&gt;First, install ts-node:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install ts-node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, create your TypeScript module file that will contain your CLI logic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cli.ts&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello from TypeScript!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, create your entry script.  This is the script you will run from your shell.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;my-script&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#!/usr/bin/env node
&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ts-node'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./cli.ts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You need to make this file executable first, so run &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod +x ./my-script&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;./my-script&lt;/code&gt; from your shell:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ./my-script
Hello from TypeScript!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you make changes to the cli.ts file, they will be picked up the next time you run my-script because the latest is running through ts-node.&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Mar 2018 00:00:00 -0600</pubDate>
        <link>https://www.geekytidbits.com/cli-apps-in-typescript-via-ts-node/</link>
        <guid isPermaLink="true">https://www.geekytidbits.com/cli-apps-in-typescript-via-ts-node/</guid>
        
        
      </item>
    
      <item>
        <title>Things I have learned working remotely for 3 years</title>
        <description>&lt;p&gt;&lt;img src=&quot;/media/laptop-on-desk.jpeg&quot; alt=&quot;Laptop on Test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;About 3 years ago, I &lt;a href=&quot;https://www.geekytidbits.com/joining-you-need-a-budget/&quot;&gt;joined the YNAB team&lt;/a&gt;. This was my first remote work experience and although I have come to really enjoy working remotely, it hasn‚Äôt been without some challenges.  I did some things wrong early on, a few things right, and I am still learning as I go.&lt;/p&gt;

&lt;h2 id=&quot;i-really-like-it&quot;&gt;I really like it&lt;/h2&gt;

&lt;p&gt;First of all, I want to mention that I have really come to enjoy working remotely.  The reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Control of my working environment&lt;/strong&gt; - I am able to create a quiet, comfortable working environment in my home.  For me, this is a huge boost to my productivity and happiness.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Geographical flexibility&lt;/strong&gt; - This is pretty obvious but I sure do enjoy being able to have flexibility in where I work, geographically.  My wife stays at home with the kids so if we want to take a trip out of town or out of state to visit family, we can stay for &lt;em&gt;weeks&lt;/em&gt; if we want to because I can just setup and work from there.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons learned&lt;/h2&gt;
&lt;p&gt;One of the first (and best) things I did when I knew I would be working remotely, was reach out to a buddy of mine I‚Äôve known since college to get his advice on remote work.  He had been working remotely for about 5 years by that time and I knew he would have plenty of good tips.  And I was right.  He was able to give me some things to watch out for and some ideas for settings up some positive habits early on.&lt;/p&gt;

&lt;p&gt;I put those tips into practice and figured a few things out that work well for me.  The biggest lessons I‚Äôve learned that make remote work sustainable are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Physically separate work and home&lt;/strong&gt; - my office is in the far corner of the house with 2 doors of separation from everything else. When I‚Äôm home, I don‚Äôt see my office and it‚Äôs a bit out of reach. If my office is visible I lose separation of work/home and this can lead to dread/burnout.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tear down at the end of the day&lt;/strong&gt; - when it‚Äôs quitting time, I make a point to get to a good stopping place, shut my laptop all the way down and close my office door. It‚Äôs tempting to plan to ‚Äúfinish some stuff up after dinner and kid‚Äôs bedtime‚Äù but it‚Äôs a dangerous precedent because it can lead to burn out and take away from family time.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Work somewhere else a few times a week&lt;/strong&gt; - It took me awhile to learn this but to prevent cabin-fever, it‚Äôs good to go work somewhere like a coffee shop for a few hours a couple of times a week because it helps me interact with actual people and mix things up a bit.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 22 Feb 2018 00:00:00 -0600</pubDate>
        <link>https://www.geekytidbits.com/things-i-have-learned-working-remotely-for-3-years/</link>
        <guid isPermaLink="true">https://www.geekytidbits.com/things-i-have-learned-working-remotely-for-3-years/</guid>
        
        
      </item>
    
      <item>
        <title>Making an app with my daughter</title>
        <description>&lt;p&gt;I have been wanting to spur &lt;a href=&quot;https://en.wikipedia.org/wiki/Science,_technology,_engineering,_and_mathematics&quot;&gt;STEM&lt;/a&gt; interest in my 6, soon to be 7, year-old daughter recently and haven‚Äôt been quite sure of the best avenue to do so until yesterday.  Earlier in the day yesterday, I was annotating a screenshot I had taken in &lt;a href=&quot;https://monosnap.com/welcome&quot;&gt;Monosnap&lt;/a&gt; while she looked on.  She asked some curious questions like ‚ÄúWhat‚Äôs that?‚Äù, ‚ÄúCan you make that line pink?‚Äù, ‚ÄúCan you add a picture?‚Äù.  Ohhh, I like how she‚Äôs thinking!  So, I said, ‚ÄúDo you want to make an app with me later today?‚Äù.  Of course she said yes.  She‚Äôs 6 and still likes spending good quality time with her Daddy.  So, we picked a time after naps to work on it.&lt;/p&gt;

&lt;p&gt;Before that time, I did a little thinking and planning.  I knew I wanted to make a simple paint app with her but honestly I had never made a painting app.  How am I going to write an app with her if I have no idea what I‚Äôm doing?  Google was my friend.  It didn‚Äôt take long for me to decide on using HTML &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; with some JavaScript to make a quick-and-dirty painting app.  There was some simple getting started tutorials on these types of uses for &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; so I prototyped a really simple working example to prepare.&lt;/p&gt;

&lt;p&gt;Once the time came, we got busy.  I showed her what I had so far.  It was really simple; a 50x50 box you could draw a green line in while moving the mouse.  I asked her, ‚ÄúOk, what do you want to change?‚Äù.  The color of course.  ‚ÄúMake it pink‚Äù.  I opened the code and explained ‚ÄúThese are the instructions that make the app work..you don‚Äôt need to understand them but I want you to know this is how it works.‚Äù  She was more mesmerized than I expected.  I changed the hex color to pink and refreshed.  She was really excited about that!  She then wanted to add a background image so she could actually paint it.  ‚ÄúWhat image?‚Äù.  A princess crown of couse.  Google Image search to the rescue.  A few lines of JavaScript and we have a background image.  This process of back and forth went on for about 45 minutes until we had something we were both happy with.  She then wanted to color the princess crown, print it out and give it as Valentine‚Äôs Day gifts.  She‚Äôs so sweet.  She started coloring and messed up a little.  ‚ÄúDaddy, how do I fix that?‚Äù.  Uh oh, we need Undo.  ‚ÄúLet‚Äôs make an Undo feature‚Äù.  Google to the recuse again because I‚Äôm not sure how to do that with &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;.  Once Undo was implemented she was off to the races.&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;Here‚Äôs the working app:
&lt;img src=&quot;../media/painting-app.gif&quot; alt=&quot;painting-app&quot; height=&quot;451&quot; width=&quot;691&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, of course, I had to publish it GitHub for her: &lt;a href=&quot;https://github.com/bradymholt/the-painting-app&quot;&gt;https://github.com/bradymholt/the-painting-app&lt;/a&gt;.  We also made a shortened URL to the GitHub Page driven app url: &lt;a href=&quot;https://tiny.cc/kaylagrace&quot;&gt;https://tiny.cc/kaylagrace&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;it-was-fun&quot;&gt;It was fun&lt;/h2&gt;

&lt;p&gt;It was a lot of fun building this together with her and she had a good time too.  I am really looking forward to doing more activities like this with her.  When we posted the app on GitHub she said, ‚ÄúDaddy, are we going to be famous?‚Äù.  I said, ‚ÄúMaybe, baby girl, maybe‚Äù.  :)&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Feb 2018 00:00:00 -0600</pubDate>
        <link>https://www.geekytidbits.com/making-an-app-with-my-daughter/</link>
        <guid isPermaLink="true">https://www.geekytidbits.com/making-an-app-with-my-daughter/</guid>
        
        
      </item>
    
      <item>
        <title>TIL: psql with VS Code</title>
        <description>&lt;p&gt;I was catching up on my Feedly yesterday and ran across &lt;a href=&quot;http://www.craigkerstiens.com/2018/01/31/postgres-hidden-gems/&quot;&gt;Postgres Hidden Gems&lt;/a&gt; by Craig Kerstein.  There are some really neat things in that list!
One thing that caught my eye was this one:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@l_avrot ‚Äì The fact that we can use vim editor in psql&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Really?  I didn‚Äôt know that.  Tell me more.  So I Googled a bit and of course another post from Craig titled &lt;a href=&quot;http://www.craigkerstiens.com/2013/02/13/How-I-Work-With-Postgres/&quot;&gt;How I Work With Postgres ‚Äì Psql, My PostgreSQL Admin&lt;/a&gt; popped up.  Here, he explains how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;\e&lt;/code&gt; in psql to ‚Äúallow you to view and edit your last run query in your editor of choice‚Äù.  That sounds really useful, especially when working with longer, more involved queries.&lt;/p&gt;

&lt;p&gt;My ‚Äúeditor of choice‚Äù is &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt; and when I attempted to use &lt;code class=&quot;highlighter-rouge&quot;&gt;\e&lt;/code&gt; with my &lt;code class=&quot;highlighter-rouge&quot;&gt;EDITOR&lt;/code&gt; var set to ‚Äúcode‚Äù it did not work.  The current query was not passed to VS Code and when saving the file from VS Code, nothing got sent back to psql.&lt;/p&gt;

&lt;p&gt;More Googling and fiddling and I found that I needed to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; parameter when launching VS Code so that it would ‚ÄúWait for the files to be closed before returning.‚Äù, per the &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt; output.  Also, I learned that you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;PSQL_EDITOR&lt;/code&gt; to set the editor specific to psql, which I prefer because I like keeping &lt;code class=&quot;highlighter-rouge&quot;&gt;EDITOR&lt;/code&gt; set to vim for varios shell things.  Editing SQL, however, I would much prefer to do in VS Code rather than vim, thank you very much.  So, now I have the following environment variable defined in my .zshrc:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PSQL_EDITOR=&quot;code -w&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now when I enter &lt;code class=&quot;highlighter-rouge&quot;&gt;\e&lt;/code&gt; from psql, VS Code launches with the contents of my current or last executed query and saving the file results in psql executing the query.  Awesome!&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Feb 2018 00:00:00 -0600</pubDate>
        <link>https://www.geekytidbits.com/til:-psql-with-vscode/</link>
        <guid isPermaLink="true">https://www.geekytidbits.com/til:-psql-with-vscode/</guid>
        
        
      </item>
    
  </channel>
</rss>
